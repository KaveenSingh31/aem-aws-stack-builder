---
- name: AEM Author CloudFormation Stack
  hosts: all
  gather_facts: no
  connection: local

  tasks:

    - name: Generate random credentials for system users
      system_users_credentials:
      register: credentials
      tags:
      - create

    - name: Ensure stage directory exists
      file:
        path: ../../../stage
        state: directory
        mode: 0755
      tags:
      - create

    - name: Create temporary file containing generated credentials
      copy:
        content: "{{ credentials.meta }}"
        dest: ../../../stage/system-users-credentials.json
      tags:
      - create

    - name: Ensure data bucket exists
      s3_bucket:
        name: "{{ s3.data_bucket_name }}"
        state: present
      tags:
      - create

    - name: Upload stack init script
      s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/stack-init.sh"
        src: ../../../scripts/stack-init.sh
        mode: put
      tags:
      - create

    - name: Check that the aem-aws-stack-provisioner.tar.gz exists
      stat:
        path: ../../../stage/aem-aws-stack-provisioner.tar.gz
      register: provisioner_stat_result
      tags:
      - create

    - name: Download stack provisioner
      s3:
        bucket: "{{ stack_provisioner.source_bucket_name }}"
        object: "{{ stack_provisioner.source }}"
        dest: ../../../stage/aem-aws-stack-provisioner.tar.gz
        mode: get
      when: provisioner_stat_result.stat.exists == False
      tags:
      - create

    - name: Upload stack provisioner
      s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/aem-aws-stack-provisioner.tar.gz"
        src: ../../../stage/aem-aws-stack-provisioner.tar.gz
        mode: put
      tags:
      - create

    - name: Check that the aem-stack-custom-provisioner.tar.gz exists
      stat:
        path: ../../../stage/aem-stack-custom-provisioner.tar.gz
      register: custom_provisioner_stat_result
      tags:
      - create

    - name: Upload custom stack provisioner
      s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/aem-stack-custom-provisioner.tar.gz"
        src: ../../../stage/aem-stack-custom-provisioner.tar.gz
        mode: put
      when: custom_provisioner_stat_result.stat.exists == True
      tags:
      - create

    - name: Check that the aem-orchestrator.jar exists
      stat:
        path: ../../../stage/aem-orchestrator.jar
      register: orchestrator_stat_result
      tags:
      - create

    - name: Download stack orchestrator
      s3:
        bucket: "{{ stack_orchestrator.source_bucket_name }}"
        object: "{{ stack_orchestrator.source }}"
        dest: ../../../stage/aem-orchestrator.jar
        mode: get
      when: orchestrator_stat_result.stat.exists == False
      tags:
      - create

    - name: Upload stack orchestrator
      s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/aem-orchestrator.jar"
        src: ../../../stage/aem-orchestrator.jar
        mode: put
      tags:
      - create


    - name: Upload system user credentials
      s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/system-users-credentials.json"
        src: ../../../stage/system-users-credentials.json
        mode: put
        encrypt: yes
      tags:
      - create

    - name: Delete stack data
      s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}"
        mode: delobj
      tags:
      - delete
