---
- name: AEM Author CloudFormation Stack
  hosts: all
  gather_facts: no
  connection: local

  tasks:

    - name: Ensure stage directory exists
      file:
        path: ../../../stage
        state: directory
        mode: 0755
      tags:
      - create

    - name: Generate random credentials for system users
      system_users_credentials:
      register: system_users_credentials
      tags:
      - create

    - name: Create temporary file containing generated credentials
      copy:
        content: "{{ system_users_credentials.meta }}"
        dest: ../../../stage/system-users-credentials.json
      tags:
      - create

    - name: Generate stack Facter facts
      stack_facter_facts:
        proxy_enabled: "{{ proxy.enabled }}"
        proxy_protocol: "{{ proxy.protocol }}"
        proxy_host: "{{ proxy.host }}"
        proxy_port: "{{ proxy.port }}"
        aem_orchestrator_version: "{{ library.aem_orchestrator_version }}"
        oak_run_version: "{{ library.oak_run_version }}"
        cron_env_path: "{{ cron.env_path }}"
        cron_https_proxy: "{{ cron.https_proxy }}"
        stack_manager_sns_topic_arn: "{{ stack_manager_sns_topic_arn }}"
        publish_dispatcher_allowed_client: "{{ publish_dispatcher.allowed_client }}"
      register: stack_facter_facts
      tags:
      - create

    - name: Create custom file containing generated stack Facter facts
      copy:
        content: "{{ stack_facter_facts.meta }}"
        dest: ../../../stage/stack-facts.txt
      tags:
      - create

    - name: Ensure data bucket exists
      s3_bucket:
        name: "{{ s3.data_bucket_name }}"
        state: present
      tags:
      - create

    - name: Upload stack init script
      s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/stack-init.sh"
        src: ../../../scripts/stack-init.sh
        mode: put
      tags:
      - create

    - name: Copy system user credentials from source bucket to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "{{ source_stack_prefix }}/system-users-credentials.json"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/system-users-credentials.json"
      when: not((source_stack_prefix is undefined) or (source_stack_prefix is none) or (source_stack_prefix | trim == ''))
      tags:
      - create

    - name: Copy deploy-artifacts-descriptor from source bucket to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "{{ source_stack_prefix }}/deploy-artifacts-descriptor.json"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/deploy-artifacts-descriptor.json"
      when: not((source_stack_prefix is undefined) or (source_stack_prefix is none) or (source_stack_prefix | trim == ''))
      tags:
      - create

    - name: Copy export-backups-descriptor from source bucket to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "{{ source_stack_prefix }}/export-backups-descriptor.json"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/export-backups-descriptor.json"
      when: not((source_stack_prefix is undefined) or (source_stack_prefix is none) or (source_stack_prefix | trim == ''))
      tags:
      - create

    - name: Upload system user credentials
      s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/system-users-credentials.json"
        src: ../../../stage/system-users-credentials.json
        mode: put
        encrypt: yes
      when: (source_stack_prefix is undefined) or (source_stack_prefix is none) or (source_stack_prefix | trim == '')
      tags:
      - create

    - name: Upload stack Facter facts
      s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/stack-facts.txt"
        src: ../../../stage/stack-facts.txt
        mode: put
        encrypt: yes
      tags:
      - create

    - name: Copy AEM Stack Provisioner from library to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "library/aem-aws-stack-provisioner-{{ library.aem_aws_stack_provisioner_version }}.tar.gz"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/aem-aws-stack-provisioner-{{ library.aem_aws_stack_provisioner_version }}.tar.gz"
      tags:
      - create

    - name: Copy AEM Orchestrator from library to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "library/aem-orchestrator-{{ library.aem_orchestrator_version }}.jar"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/aem-orchestrator-{{ library.aem_orchestrator_version }}.jar"
      tags:
      - create

    - name: Copy Oak run from library to data bucket
      s3_copy_object:
        src_bucket: "{{ s3.data_bucket_name }}"
        src_key: "library/oak-run-{{ library.oak_run_version }}.jar"
        dest_bucket: "{{ s3.data_bucket_name }}"
        dest_key: "{{ stack_prefix }}/oak-run-{{ library.oak_run_version }}.jar"
      tags:
      - create

    - name: Check that custom AEM Stack Provisioner exists
      stat:
        path: ../../../stage/aem-custom-stack-provisioner.tar.gz
      register: custom_provisioner_stat_result
      tags:
      - create

    - name: Upload custom AEM Stack Provisioner
      s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}/aem-custom-stack-provisioner.tar.gz"
        src: ../../../stage/aem-custom-stack-provisioner.tar.gz
        mode: put
      when: custom_provisioner_stat_result.stat.exists == True
      tags:
      - create

    # TODO: s3_sync is only availabe in version 2.3
    # - name: Upload CloudFormation Templates to S3
    #   s3_sync:
    #     bucket: "{{ s3.data_bucket_name }}"
    #     file_root: "cloudformation/apps"
    #     key_prefix: "{{ stack_prefix }}"
    #     mode: push
    #     permission: public-read
    #     region: "{{ aws.region }}"
    #     include: "*.yaml"
    #   tags:
    #     - create

    - name: Upload CloudFormation Templates to S3
      command: >
              aws s3 sync ../../../cloudformation/apps
                  s3://{{ s3.data_bucket_name }}/{{ stack_prefix }}
                  --include "*.yaml" --acl public-read
      tags:
        - create

    - name: Create a Per Stack Route53 Hosted Zone
      route53_zone:
        zone: "{{ stack_prefix }}.{{dns.stack_sub_domain}}.{{ dns.apex_domain_name}}"
        comment: AEM {{ stack_prefix }} App Stacks Hosted Zone
        region: "{{ aws.region }}"
        state: present
      register: create_zone_result
      tags:
        - create

    - name: Retrieve the Hosted Zone ID of the Per Stack Zone
      route53_facts:
        query: hosted_zone
        hosted_zone_method: list_by_name
        dns_name: "{{ stack_prefix }}.{{ dns.stack_sub_domain }}.{{ dns.apex_domain_name}}"
      register: list_zone_result
      tags:
        - create
        - delete

    - name: Retrieve Name Servers for per Stack Zone
      route53_facts:
        query: record_sets
        hosted_zone_id: "{{ list_zone_result.HostedZones[0].Id }}"
        type: NS
        start_record_name: "{{ stack_prefix }}.{{ dns.stack_sub_domain }}.{{ dns.apex_domain_name}}"
        max_items: 1
      register: stack_zone_ns_records
      tags:
        - create
        - delete

    - name: Create a NS Record in Parenet Zone for the New Stack Zone
      route53:
        command: create
        record: "{{ stack_prefix }}.{{ dns.stack_sub_domain }}.{{ dns.apex_domain_name}}"
        ttl: 86400
        type: NS
        zone: "{{ dns.apex_domain_name}}"
        value: "{{stack_zone_ns_records.ResourceRecordSets[0].ResourceRecords|json_query('[].Value')|sort|join(',')}}"
      tags:
        - create

    - name: Delete the NS Record in Parent Zone for the per Stack Zone
      route53:
        command: delete
        record:  "{{ stack_prefix }}.{{ dns.stack_sub_domain }}.{{ dns.apex_domain_name}}"
        ttl: 86400
        type: NS
        zone: "{{ dns.apex_domain_name}}"
        value: "{{stack_zone_ns_records.ResourceRecordSets[0].ResourceRecords|json_query('[].Value')|sort|join(',')}}"
      tags:
        - delete

    - name: Delete Per Stack Route53 Hosted Zone
      route53_zone:
        zone: "{{ stack_prefix }}.{{ dns.stack_sub_domain }}.{{ dns.apex_domain_name}}"
        region: "{{ aws.region }}"
        state: absent
      tags:
        - delete

    - name: Delete stack data
      s3:
        bucket: "{{ s3.data_bucket_name }}"
        object: "{{ stack_prefix }}"
        mode: delobj
      tags:
      - delete
