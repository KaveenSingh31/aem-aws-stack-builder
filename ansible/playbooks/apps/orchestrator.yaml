---
- name: AEM Orchestrator CloudFormation Stack
  hosts: all
  gather_facts: no
  connection: local

  tasks:
    - name: Get AEM Stack VPC
      ec2_vpc_net_facts:
        region: "{{ aws.region }}"
        filters:
          "tag:Name": "{{ ec2_vpc.tag_name }}"
      register: aem_stack_vpc
      tags:
      - create

    - name: Get Orchestrator Subnet A
      ec2_vpc_subnet_facts:
        region: "{{ aws.region }}"
        filters:
          "tag:Name": "{{ network.tool.subnet_a.tag_name }}"
          vpc-id: "{{ aem_stack_vpc.vpcs.0.id }}"
      register: orchestrator_subnet_a
      tags:
      - create

    - name: Get Orchestrator Subnet B
      ec2_vpc_subnet_facts:
        region: "{{ aws.region }}"
        filters:
          "tag:Name": "{{ network.tool.subnet_b.tag_name }}"
          vpc-id: "{{ aem_stack_vpc.vpcs.0.id }}"
      register: orchestrator_subnet_b
      tags:
      - create

    - name: Create AEM Orchestrator Stack
      cloudformation:
        stack_name: "{{ stack_prefix }}-{{ orchestrator.stack_name }}"
        region: "{{ aws.region }}"
        state: present
        disable_rollback: true
        template: "../../../cloudformation/apps/orchestrator.yaml"
        template_parameters:
          ComputeStackPrefixParameter: "{{ stack_prefix }}"
          OrchestratorInstanceProfileParameter: "{{ orchestrator.instance_profile }}"
          OrchestratorImageParameter: "{{ orchestrator.ami_id }}"
          OrchestratorInstanceTypeParameter: "{{ orchestrator.instance_type }}"
          ComputeKeyPairNameParameter: "{{ compute.key_pair_name }}"
          OrchestratorASGAvailabilityZoneListParameter: "{{ aws.availability_zone_a }}, {{ aws.availability_zone_b }}"
          OrchestratorASGSubnetListParameter: "{{ orchestrator_subnet_a.subnets.0.id }}, {{ orchestrator_subnet_b.subnets.0.id }}"
          OrchestratorTagNameParameter: "{{ orchestrator.tag_name }}"
          ApplicationVersionParameter: "{{ compute.application_version }}"
          RolesStackNameParameter: "{{ roles.stack_name }}"
          SecurityGroupsStackNameParameter: "{{ security_groups.stack_name }}"
          InboundFromBastionHostSecurityGroupParameter: "{{ compute.inbound_from_bastion_host_security_group }}"
          InitScriptS3UriParameter: "{{ compute.init_script_s3_uri }}"
      tags:
      - create

    - name: Delete AEM Orchestrator Stack
      cloudformation:
        stack_name: "{{ stack_prefix }}-{{ orchestrator.stack_name }}"
        region: "{{ aws.region }}"
        state: absent
      tags:
      - delete
