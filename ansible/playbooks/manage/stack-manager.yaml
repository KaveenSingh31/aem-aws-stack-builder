---
- name: Deploy AEM Stack Manager Lambda Implementation
  hosts: all
  gather_facts: no
  connection: local
  vars:
    stack_manager_tmp: ./stack_manager_deploy

  tasks:
    - name: Create A Deploy Directory for Lambda Bundle and Config File
      file:
        path: "{{ stack_manager_tmp }}"
        state: directory
        mode: 0755
      tags:
        - create

    - name: Zip AEM Stack Manager Lambda Implementation
      command: >
        zip -j "{{ stack_manager_tmp }}/aem_stack_manager.zip" "../../../lambda/aem_stack_manager.py"
      tags:
        - create

    - name: Zip AEM Offline Snapshot Lambda Implementation
      shell: >
        zip -j "{{ stack_manager_tmp }}/aem_offline_snapshot.zip" "../../../lambda/aem_offline_snapshot.py"
      tags:
        - create

    - name: Zip AEM Task Status Query Lambda Implementation
      shell: >
        zip -j "{{ stack_manager_tmp }}/aem_task_query.zip" "../../../lambda/aem_task_query.py"
      tags:
        - create

    - name: Upload Lambada Function Zip Archives to S3
      command: >
              aws s3 sync "{{ stack_manager_tmp }}"
                  s3://{{ s3.data_bucket_name }}/{{ stack_manager.s3_prefix }}
                  --include "*.zip"
      tags:
        - create

    - name: >
        Create AEM Stack Manager/Offline Snapshot Lambda Function and Resources
      cloudformation:
        stack_name: aem-stack-manager-cloud
        region: "{{ aws.region }}"
        state: present
        disable_rollback: false
        template: "../../../cloudformation/manage/aem-stack-manager-cloud.yaml"
        template_parameters:
          S3Bucket: "{{ s3.data_bucket_name }}"
          S3Prefix: " {{ stack_manager.s3_prefix }}"
      register: stack_info
      tags:
        - create

    - name: set TTL attribute on the DynamoDB Table
      command: >
        aws dynamodb update-time-to-live --table-name AemStackManagerTable
           --time-to-live-specification Enabled=true,AttributeName=ttl
           --region "{{ aws.region }}"
      when: stack_info|succeeded  and stack_info.changed == true
      tags:
        - create

    - name: Update config.json template to the stack output
      shell:  >-
        jq --arg statusarn "{{ stack_info.stack_outputs.TaskStatusTopicArn }}" \
           --arg role "{{ stack_info.stack_outputs.SSMServiceRoleArn}}" \
           --arg bucket "{{ s3.data_bucket_name }}" \
           --arg backuparn "{{ stack_info.stack_outputs.BackupTopicArn}}" \
        '."ec2_run_command"."status-topic-arn"=$statusarn|'\
        '."ec2_run_command"."ssm-service-role-arn"=$role|'\
        '."ec2_run_command"."cmd-output-bucket"=$bucket|'\
        '."offline_snapshot"."sns-topic-arn"=$backuparn' \
           ../../../lambda/config.json.template  >  "{{ stack_manager_tmp }}"/config.json
      when: stack_info|succeeded
      tags:
       - create

    - name: Upload config.json to S3
      s3:
         bucket: "{{ s3.data_bucket_name }}"
         mode: put
         src: "{{ stack_manager_tmp }}/config.json"
         object: "{{ stack_manager.s3_prefix }}/config.json"
      when: stack_info|succeeded
      tags:
       - create

    - name: Check if a Stack Exists
      command: >
        aws cloudformation describe-stacks --stack-name "aem-stack-manager-cloud"
             --query 'Stacks[].StackName' --region "{{ aws.region }}"
      ignore_errors: True
      register: stack_query
      tags:
        - delete

    - name: Report Stack Problem
      debug:
        msg: Stack aem-stack-manager-cloud does not exist or some other errors occured
      when:
        "stack_query.rc != 0"
      tags:
        - delete

    - name: Delete AEM Stack Manager Stack
      cloudformation:
        stack_name: aem-stack-manager-cloud
        region: "{{ aws.region }}"
        state: absent
      when:
        "stack_query.rc == 0"
      tags:
        - delete

    - name: Clean Up Deploy Folder
      file:
        path: "{{ stack_manager_tmp }}"
        state: absent
      tags:
        - always
