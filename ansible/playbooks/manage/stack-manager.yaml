---
- name: Deploy AEM Stack Manager Lambda Implementation
  hosts: all
  gather_facts: no
  connection: local
  vars:
    stack_manager_tmp: ./stack_manager_deploy

  tasks:
    - name: Create A Deploy Directory for Lambda Bundle and Config File
      file:
        path: "{{ stack_manager_tmp }}"
        state: directory
        mode: 0755
      tags:
        - create

    - name: Zip AEM Stack Manager Lambda Implementation
      archive:
        path: "../../../lambda/aem_stack_manager.py"
        dest: "{{ stack_manager_tmp }}/aem-stack-manager.zip"
        format: zip
        remove: no
      tags:
        - create

    - name: Zip AEM Offline Snapshot Lambda Implementation
      archive:
        path: "../../../lambda/aem_offline_snapshot.py"
        dest: "{{ stack_manager_tmp }}/aem-offline-snapshot.zip"
        format: zip
        remove: no
      tags:
        - create

    - name: Copy Lambda Config Files to Deploy Folder
      copy:
        src: "../../../lambda/config.json"
        dest: "{{ stack_manager_tmp }}/config.json"
        mode: 0755
      tags:
        - create

    - name: Upload Stack Manager Zip Archive and Config File to S3
      s3_sync:
        bucket: "{{ s3.data_bucket_name }}"
        key_prefix: "{{ stack_prefix }}"
        mode: push
        file_root: "{{ stack_manager_tmp }}"
      tags:
        - create

    - name: >
        Create AEM Stack Manager/Offline Snapshot Lambda Function and Resources
      cloudformation:
        stack_name: "{{ stack_prefix }}-aem-stack-manager-cloud"
        region: "{{ aws.region }}"
        state: present
        disable_rollback: false
        template: "../../../cloudformation/manage/aem-stack-manager-cloud.yaml"
        template_parameters:
          StackPrefix: "{{ stack_prefix }}"
          S3Bucket: "{{ s3.data_bucket_name }}"
          S3Prefix: " {{ stack_prefix }}"
      tags:
        - create

    - name: Clean Up Deploy Folder After
      file:
        path: "{{ stack_manager_tmp }}"
        state: absent
      tags:
        - create

    - name: Check if a Stack Exists
      command: >
        aws cloudformation describe-stacks --stack-name "{{ stack_prefix }}-aem-stack-manager-cloud"
             --query 'Stacks[].StackName' --region "{{ aws.region }}"
      ignore_errors: True
      register: stack_query
      tags:
        - delete

    - name: Report Stack Problem
      debug:
        msg: Stack "{{ stack_prefix }}-aem-stack-manager-cloud" does not exist or some other errors occured
      when:
        "stack_query.rc != 0"
      tags:
        - delete

    - name: Delete AEM Stack Manager Stack
      cloudformation:
        stack_name: "{{ stack_prefix }}-aem-stack-manager-cloud"
        region: "{{ aws.region }}"
        state: absent
      when:
        "stack_query.rc == 0"
      tags:
        - delete
