AWSTemplateFormatVersion: '2010-09-09'

Description: Create AWS Lambada Implementation of AEM Stack Mananger Resources

Parameters:
  StackPrefix:
    Type: String
    Description: The AEM compute stack prefix
    Default: andy

  S3Bucket:
    Type: String
    Description: Bucket name that stores files used by the functions
    Default: aem-stack-builder

  S3Prefix:
    Type: String
    Description: Prefix within the bucket to locate files
    Default: andy

  SNSTopicArn:
    Type: String
    Description: SNS topic ARN this Lambda function subscribes to get command
    Default: arn:aws:sns:ap-southeast-2:918473058104:aem62test

Conditions:
  UseImportedTopicArn:
    Fn::Equals:
      - Ref: SNSTopicArn
      - ""

Resources:
  StackManagerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: environment
          AttributeType: S
        -
          AttributeName: task
          AttributeType: S
      KeySchema:
        -
          AttributeName: environment
          KeyType: HASH
        -
          AttributeName: task
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: AemStackManagerTable

  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StackManagerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:Describe*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/${S3Prefix}/*"
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:CancelCommand
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:UpdateTimeToLive
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${StackManagerTable}
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt SSMServiceRole.arn

  ManagerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: AEM Stack Manager Function
      FunctionName: AemStackManager
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${StackPrefix}/aem-stack-manager.zip
      Environment:
        Variables:
          LOG_LEVEL: "20"
          S3_BUCKET: !Ref S3Bucket
          S3_PREFIX: !Ref S3Prefix
      Handler: aem_stack_manager.sns_message_processor
      MemorySize: 128
      Role: !GetAtt LambdaServiceRole.Arn
      Runtime: python2.7
      Timeout: 15

  InitialVersion:
    Type: AWS::Lambda::Version
    Properties:
      Description: Initial Version to Start With
      FunctionName: !Ref ManagerLambdaFunction

  LambdaDevAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Description: Lambda Alias for Development Use
      FunctionName: !Ref ManagerLambdaFunction
      FunctionVersion: "$LATEST"
      Name: dev

  LambdaProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Description: Lambda Alias for Production Use
      FunctionName: !Ref ManagerLambdaFunction
      FunctionVersion: !GetAtt InitialVersion.Version
      Name: prod

  LambadaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaProdAlias
      Principal: sns.amazonaws.com
      SourceArn:
        Fn::If:
          - UseImportedTopicArn
          - Fn::ImportValue: !Sub ${StackPrefix}-AEMASGEventTopic
          - !Ref SNSTopicArn

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref LambdaProdAlias
      Protocol: lambda
      TopicArn:
        Fn::If:
          - UseImportedTopicArn
          - Fn::ImportValue: !Sub ${StackPrefix}-AEMASGEventTopic
          - !Ref SNSTopicArn

  OfflineBackupTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: AEM Backup
      TopicName: AemOfflineBackup

  OfflineBackupLambada:
    Type: AWS::Lambda::Function
    Properties:
      Description: AEM Offline Backup Function
      FunctionName: AemOfflineBackup
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${StackPrefix}/aem-offline-snapshot.zip
      Environment:
        Variables:
          LOG_LEVEL: "20"
          S3_BUCKET: !Ref S3Bucket
          S3_PREFIX: !Ref S3Prefix
      Handler: aem_offline_snapshot.sns_message_processor
      MemorySize: 128
      Role: !GetAtt LambdaServiceRole.Arn
      Runtime: python2.7
      Timeout: 15

  BackupInitialVersion:
    Type: AWS::Lambda::Version
    Properties:
      Description: Initial Version to Start With
      FunctionName: !Ref OfflineBackupLambada

  BackupLambdaDevAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Description: Lambda Alias for Development Use
      FunctionName: !Ref OfflineBackupLambada
      FunctionVersion: "$LATEST"
      Name: dev

  BackupLambdaProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Description: Lambda Alias for Production Use
      FunctionName: !Ref OfflineBackupLambada
      FunctionVersion: !GetAtt BackupInitialVersion.Version
      Name: prod

  BackupLambadaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BackupLambdaProdAlias
      Principal: sns.amazonaws.com
      SourceArn: !Ref OfflineBackupTopic

  BackupSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref BackupLambdaProdAlias
      Protocol: lambda
      TopicArn: !Ref OfflineBackupTopic

  SSMServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AemBackupPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/SSMOutput/*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref OfflineBackupTopic

Outputs:
  SSMServiceRoleArn:
    Description: SSM service role allowing output to s3 and send sns notification
    Value: !GetAtt SSMServiceRole.Arn
  BackupTopicArn:
    Description: SNS topic Arn used to orchestrate offline backup
    Value: !Ref OfflineBackupTopic
