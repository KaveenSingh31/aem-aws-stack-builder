AWSTemplateFormatVersion: '2010-09-09'

Description: Create the Compute resources for the AEM Author

Parameters:

  ComputeStackPrefixParameter:
    Type: String
    Description: The AEM Stack Compute Resources Stack Prefix

  SSLCertificateARNParameter:
    Type: String
    Description: The ARN for SSL Certificate

  AuthorLoadBalancerHealthCheckTargetParameter:
    Type: String
    Description: AEM Author ELB Health Check Target

  AuthorSubnetAParameter:
    Type: AWS::EC2::Subnet::Id
    Description: The Author Subnet in Availability Zone A

  AuthorSubnetBParameter:
    Type: AWS::EC2::Subnet::Id
    Description: The Author Subnet in Availability Zone B

  AuthorInstanceProfileParameter:
    Type: String
    Description: The Author Instance Profile

  AuthorImageParameter:
    Type: AWS::EC2::Image::Id
    Description: The Author Image Id

  AuthorInstanceTypeParameter:
    Type: String
    Description: The Author Instance Type

  ComputeKeyPairNameParameter:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The Compute Resources Key Pair Name

  AuthorTagNameParameter:
    Type: String
    Description: The Author Name Tag

  ApplicationVersionParameter:
    Type: String
    Description: The Application Version Number

  AuthorLoadBalancerTagNameParameter:
    Type: String
    Description: The Author Load Balancer Name Tag

  RolesStackNameParameter:
    Type: String
    Description: The AEM Roles Stack Name

  SecurityGroupsStackNameParameter:
    Type: String
    Description: The AEM Security Groups Stack Name

  InboundFromBastionHostSecurityGroupParameter:
    Type: String
    Description: Inbound Bound from Bastion Host Security Group Id

  DataBucketNameParameter:
    Type: String
    Description: Bucket name that stores Stack data files

Resources:

  AuthorPrimaryInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 10
          VolumeType: gp2
      - DeviceName: /dev/sdb
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 10
          VolumeType: gp2
      IamInstanceProfile:
        Ref: AuthorInstanceProfileParameter
      ImageId:
        Ref: AuthorImageParameter
      InstanceType:
        Ref: AuthorInstanceTypeParameter
      KeyName:
        Ref: ComputeKeyPairNameParameter
      SecurityGroupIds:
      - Fn::ImportValue:
          Fn::Sub: ${ComputeStackPrefixParameter}-${SecurityGroupsStackNameParameter}-AuthorSecurityGroup
      - Ref: InboundFromBastionHostSecurityGroupParameter
      SubnetId:
        Ref: AuthorSubnetAParameter
      Tags:
      - Key: Stack Prefix
        Value:
          Ref: ComputeStackPrefixParameter
      - Key: Name
        Value:
          Fn::Sub: ${AuthorTagNameParameter} Primary (${ComputeStackPrefixParameter})
      - Key: Component
        Value: author-primary
      - Key: Application Version
        Value:
          Ref: ApplicationVersionParameter
      UserData:
        Fn::Base64:
          Fn::Sub: "#!/bin/bash -x\n\
            \ mkdir -p /tmp/aem-aws-stack-builder/\n\
            \ aws s3 cp s3://${DataBucketNameParameter}/${ComputeStackPrefixParameter}/stack-init.sh /tmp/aem-aws-stack-builder/stack-init.sh\n\
            \ chmod 755 /tmp/aem-aws-stack-builder/stack-init.sh\n\
            \ /tmp/aem-aws-stack-builder/stack-init.sh ${DataBucketNameParameter} ${ComputeStackPrefixParameter}\n"
  AuthorStandbyInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 10
          VolumeType: gp2
      - DeviceName: /dev/sdb
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 10
          VolumeType: gp2
      IamInstanceProfile:
        Ref: AuthorInstanceProfileParameter
      ImageId:
        Ref: AuthorImageParameter
      InstanceType:
        Ref: AuthorInstanceTypeParameter
      KeyName:
        Ref: ComputeKeyPairNameParameter
      SecurityGroupIds:
      - Fn::ImportValue:
          Fn::Sub: ${ComputeStackPrefixParameter}-${SecurityGroupsStackNameParameter}-AuthorSecurityGroup
      - Ref: InboundFromBastionHostSecurityGroupParameter
      SubnetId:
        Ref: AuthorSubnetBParameter
      Tags:
      - Key: Stack Prefix
        Value:
          Ref: ComputeStackPrefixParameter
      - Key: Name
        Value:
          Fn::Sub: ${AuthorTagNameParameter} Standby (${ComputeStackPrefixParameter})
      - Key: Component
        Value: author-standby
      - Key: Application Version
        Value:
          Ref: ApplicationVersionParameter
      UserData:
        Fn::Base64:
          Fn::Sub: "#!/bin/bash -x\n\
            \ mkdir -p /tmp/aem-aws-stack-builder/\n\
            \ aws s3 cp s3://${DataBucketNameParameter}/${ComputeStackPrefixParameter}/stack-init.sh /tmp/aem-aws-stack-builder/stack-init.sh\n\
            \ chmod 755 /tmp/aem-aws-stack-builder/stack-init.sh\n\
            \ /tmp/aem-aws-stack-builder/stack-init.sh ${DataBucketNameParameter} ${ComputeStackPrefixParameter}\n"

  AuthorLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 300
      CrossZone: true
      HealthCheck:
        Target:
          Ref: AuthorLoadBalancerHealthCheckTargetParameter
        HealthyThreshold: '2'
        UnhealthyThreshold: '2'
        Interval: '30'
        Timeout: '5'
      Instances:
      - Ref: AuthorPrimaryInstance
      - Ref: AuthorStandbyInstance
      Listeners:
      - LoadBalancerPort: '4502'
        InstancePort: '4502'
        Protocol: HTTP
      - LoadBalancerPort: '5433'
        Protocol: HTTPS
        InstancePort: '5433'
        InstanceProtocol: HTTPS
        SSLCertificateId:
          Ref: SSLCertificateARNParameter
      Scheme: internal
      SecurityGroups:
      - Fn::ImportValue:
          Fn::Sub: ${ComputeStackPrefixParameter}-${SecurityGroupsStackNameParameter}-AuthorELBSecurityGroup
      Subnets:
      - Ref: AuthorSubnetAParameter
      - Ref: AuthorSubnetBParameter
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AuthorLoadBalancerTagNameParameter}
      - Key: Stack Prefix
        Value:
          Ref: ComputeStackPrefixParameter

Outputs:

  AuthorPrimaryInstance:
    Value:
      Ref: AuthorPrimaryInstance
    Description: The Author Primary Instance

  AuthorStandbyInstance:
    Value:
      Ref: AuthorStandbyInstance
    Description: The Author Standby Instance

  AuthorLoadBalancer:
    Value:
      Ref: AuthorLoadBalancer
    Description: The Author Load Balancer

  AuthorLoadBalancerDNSName:
    Value:
      Fn::GetAtt: [AuthorLoadBalancer, DNSName]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-LoadBalancerDNSName
    Description: The Author Load Balancer
