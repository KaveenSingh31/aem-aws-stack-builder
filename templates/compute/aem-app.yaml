---
AWSTemplateFormatVersion: 2010-09-09
Description: AEM - Creates Publisher, Author, Dispatcher and Orchestrator
Parameters:
  KeyName:
    Default: ea-andy
    Description: KeyName
    Type: AWS::EC2::KeyPair::KeyName
  AMIDispatcher:
    Default: ami-429ea621
    Description: EC2 Instance AMI (Publisher Dispatcher)
    Type: AWS::EC2::Image::Id
  AMIPublisher:
    Default: ami-3794ac54
    Description: EC2 Instance AMI (Publisher)
    Type: AWS::EC2::Image::Id
  AMIAuthor:
    Default: ami-059fa766
    Description: EC2 Instance AMI (Author)
    Type: AWS::EC2::Image::Id
  AMIOrchestrator:
    Default: ami-599fa73a
    Description: EC2 Instance AMI (Orchestrator)
    Type: AWS::EC2::Image::Id
  AMIChaosMonkey:
    Default: ami-599fa73a
    Description: EC2 Instance AMI (Chaos Monkey)
    Type: AWS::EC2::Image::Id
  NameTagPublisherDisp:
    Default: L1-AEM-PublisherDisp
    Description: Name Tag for AEM Publisher Dispatcher
    Type: String
  NameTagPublisher:
    Default: L2-AEM-Publisher
    Description: Name Tag for AEM Publisher
    Type: String
  NameTagAuthor:
    Default: L3-AEM-Author
    Description: Name Tag for AEM Author
    Type: String
  NameTagAuthorDisp:
    Default: L4-AEM-AuthorDisp
    Description: Name Tag for AEM Author Dispatcher
    Type: String
  NameTagOrchestrator:
    Default: L5-AEM-Orchestrator
    Description: Name Tag for AEM Orchestrator
    Type: String
  NameTagChaosMonkey:
    Default: L5-ChaosMonkey
    Description: Name Tag for Chaos Monkey
    Type: String
  SecGrpELBWeb:
    Description: Security Group ELB Web
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-d9d021be
  SecGrpDispatcher:
    Description: Security Group AEM Dispatcher
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-dad021bd
  SecGrpPublisher:
    Description: Security Group AEM Publisher
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-a2d021c5
  SecGrpAuthor:
    Description: Security Group AEM Author
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-a4d021c3
  SecGrpELBAuthor:
    Description: Security Group ELB AEM Author
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-a7d021c0
  SecGrpAuthorDisp:
    Description: Security Group AEM Author Dispatcher
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-a5d021c2
  SecGrpELBAuthorDisp:
    Description: Security Group ELB Author Dispatcher
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-a3d021c4
  SecGrpOrchestrator:
    Description: Security Group Orchestrator
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-d8d021bf
  SecGrpChaosMonkey:
    Description: Security Group ChaosMonkey
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-a6d021c1
  SubnetPubPrezA:
    Description: Subnet for Public Presentation A
    Type: AWS::EC2::Subnet::Id
    Default: subnet-8332bde7
  SubnetPubPrezB:
    Description: Subnet for Public Presentation B
    Type: AWS::EC2::Subnet::Id
    Default: subnet-7a7dca0c
  SubnetPrvPrezASG:
    Description: The list of SubnetIds where the stack will be launched for AutoScalingGroups
    Type: CommaDelimitedList
    Default: subnet-8332bde7,subnet-7a7dca0c

  SubnetPrvAppASG:
    Description: The list of SubnetIds where the stack will be launched for AutoScalingGroups
    Type: CommaDelimitedList
    Default: subnet-8132bde5,subnet-7b7dca0d

  SubnetPrvAppIntA:
    Description: App Internal - Subnet A
    Type: AWS::EC2::Subnet::Id
    Default: subnet-8732bde3
  SubnetPrvAppIntB:
    Description: App Internal - Subnet B
    Type: AWS::EC2::Subnet::Id
    Default: subnet-787dca0e
  SubnetPrvAppToolASG:
    Description: The list of SubnetIds where the stack will be launched for AutoScalingGroups
    Type: CommaDelimitedList
    Default: subnet-8632bde2,subnet-797dca0f
  ASGPubliDispMinSize:
    Description: ASG Publisher Dispatcher - MinSize
    Type: String
    Default: "2"
  ASGPubliDispMaxSize:
    Description: ASG Publisher Dispatcher - MaxSize
    Type: String
    Default: "4"
  ASGPublisherMinSize:
    Description: ASG Publisher - MinSize
    Type: String
    Default: "2"
  ASGPublisherMaxSize:
    Description: ASG Publisher - MaxSize
    Type: String
    Default: "4"
  ASGAuthorDispMinSize:
    Description: ASG Author - MinSize
    Type: String
    Default: "2"
  ASGAuthorDispMaxSize:
    Description: ASG Author - MaxSize
    Type: String
    Default: "2"
  DNSHostedZoneName:
    Description: Hosted Zone Name
    Type: String
    Default: aem.
  StackName:
    Description: Stack name attached to the resources
    Type: String
    Default: untitled
  TagAppVersion:
    Description: AEM Application Version
    Type: String
    Default: "1"
  CertArn:
    Default: arn:aws:iam::918473058104:server-certificate/ANZTestV1
    Description: ARN for the Certificate
    Type: String
  AvailZones:
    Description: The list of AvailabilityZones for your Virtual Private Cloud (VPC). It needs to be consistent with the AZ of your subnets
    Type: CommaDelimitedList
    Default: ap-southeast-2a,ap-southeast-2b
Resources:
  RolePublisherDisp:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: /
      Policies:
        -
          PolicyDocument:
            Statement:
              -
                Sid: "01"
                Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:CreateTags
                  - autoscaling:CreateLaunchConfiguration
                  - autoscaling:DescribeLaunchConfigurations
                  - autoscaling:UpdateAutoScalingGroup
                  - autoscaling:CreateOrUpdateTags
                Resource: "*"
              -
                Sid: "02"
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: "*"
              -
                Sid: "03"
                Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - arn:aws:logs:*:*:*
          PolicyName: policyPublisherDispHost
  InstPrfPublisherDisp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        -  !Ref RolePublisherDisp
  ELBWeb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref SubnetPubPrezA
        - !Ref SubnetPubPrezB
      SecurityGroups:
        - !Ref SecGrpELBWeb
      Listeners:
        -
          LoadBalancerPort: "80"
          InstancePort: "8080"
          Protocol: HTTP
        -
          LoadBalancerPort: "443"
          Protocol: HTTPS
          InstancePort: "443"
          InstanceProtocol: HTTPS
          SSLCertificateId: !Ref CertArn
      HealthCheck:
        Target: HTTP:8080/bin/health
        HealthyThreshold: "2"
        UnhealthyThreshold: "2"
        Interval: "30"
        Timeout: "5"
      Scheme: internet-facing
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 300
      CrossZone: true
      Tags:
        -
          Key: stack_name
          Value: !Ref StackName
  PublisherDispLaunchCfg:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref InstPrfPublisherDisp
      ImageId: !Ref AMIDispatcher
      InstanceMonitoring: false
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SecGrpDispatcher
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
        -
          DeviceName: /dev/sdb
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            su - ec2-user -c /app/tools/install.sh
  PublisherDispASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref AvailZones
      VPCZoneIdentifier: !Ref SubnetPrvPrezASG
      LaunchConfigurationName: !Ref PublisherDispLaunchCfg
      LoadBalancerNames:
        - !Ref ELBWeb
      HealthCheckGracePeriod: 900
      HealthCheckType: ELB
      MinSize: !Ref ASGPubliDispMinSize
      MaxSize: !Ref ASGPubliDispMaxSize
      NotificationConfiguration:
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        TopicARN: !Ref AEMASGEventTopic
      Tags:
        -
          PropagateAtLaunch: true
          Key: Name
          Value: !Ref NameTagPublisherDisp
        -
          PropagateAtLaunch: true
          Key: stack_name
          Value: !Ref StackName
        -
          PropagateAtLaunch: true
          Key: component
          Value: aem-dispatcher-publisher
        -
          PropagateAtLaunch: true
          Key: app_version
          Value: !Ref TagAppVersion
  RolePublisher:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: /
      Policies:
        -
          PolicyDocument:
            Statement:
              -
                Sid: "01"
                Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:AttachVolume
                  - ec2:CreateVolume
                  - ec2:DetachVolume
                  - ec2:CreateSnapshot
                Resource: "*"
              -
                Sid: "02"
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: "*"
              -
                Sid: "03"
                Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - arn:aws:logs:*:*:*
          PolicyName: policyPublisherHost
  InstPrfPublisher:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        -
          Ref: RolePublisher
  PublisherLaunchCfg:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref InstPrfPublisher
      ImageId: !Ref AMIPublisher
      InstanceMonitoring: false
      InstanceType: m3.large
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SecGrpPublisher
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
        -
          DeviceName: /dev/sdb
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            su - ec2-user -c /app/tools/install.sh
  PublisherASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref AvailZones
      VPCZoneIdentifier: !Ref SubnetPrvAppASG
      LaunchConfigurationName: !Ref PublisherLaunchCfg
      HealthCheckGracePeriod: 900
      HealthCheckType: EC2
      MinSize: !Ref ASGPublisherMinSize
      MaxSize: !Ref ASGPublisherMaxSize
      NotificationConfiguration:
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        TopicARN: !Ref AEMASGEventTopic
      Tags:
        -
          PropagateAtLaunch: true
          Key: Name
          Value: !Ref NameTagPublisher
        -
          PropagateAtLaunch: true
          Key: stack_name
          Value: !Ref StackName
        -
          PropagateAtLaunch: true
          Key: component
          Value: aem-publisher
        -
          PropagateAtLaunch: true
          Key: app_version
          Value: !Ref TagAppVersion
  AEMASGEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${StackName}-ASGEvent
      VisibilityTimeout: 30
  AEMASGEventQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          -
            Sid: SQS01
            Effect: Allow
            Principal:
              AWS:
                - "*"
            Action:
              - SQS:SendMessage
            Resource:
              - !GetAtt AEMASGEventQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref AEMASGEventTopic
      Queues:
        - !Ref AEMASGEventQueue
  AEMASGEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${StackName}-ASGEvent
      DisplayName: !Sub ${StackName}-AEM AutoScaling Event
      Subscription:
        -
          Endpoint: !GetAtt AEMASGEventQueue.Arn
          Protocol: sqs
  RoleAuthor:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: /
      Policies:
        -
          PolicyDocument:
            Statement:
              -
                Sid: "01"
                Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:CreateTags
                  - autoscaling:CreateOrUpdateTags
                Resource: "*"
              -
                Sid: "02"
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:Put*
                Resource: "*"
              -
                Sid: "03"
                Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - arn:aws:logs:*:*:*
          PolicyName: policyAuthorHost
  InstPrfAuthor:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        -
          Ref: RoleAuthor
  EC2InstAuthor1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIAuthor
      IamInstanceProfile: !Ref InstPrfAuthor
      InstanceType: m3.large
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecGrpAuthor
      SubnetId: !Ref SubnetPrvAppIntA
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
        -
          DeviceName: /dev/sdb
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
      Tags:
        -
          Key: Name
          Value: !Ref NameTagAuthor
        -
          Key: stack_name
          Value: !Ref StackName
        -
          Key: component
          Value: aem-author-primary
        -
          Key: app_version
          Value: !Ref TagAppVersion
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            su - ec2-user -c /app/tools/install.sh
  EC2InstAuthor2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIAuthor
      IamInstanceProfile: !Ref InstPrfAuthor
      InstanceType: m3.large
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecGrpAuthor
      SubnetId: !Ref SubnetPrvAppIntB
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
        -
          DeviceName: /dev/sdb
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
      Tags:
        -
          Key: Name
          Value: !Ref NameTagAuthor
        -
          Key: stack_name
          Value: !Ref StackName
        -
          Key: component
          Value: aem-author-standby
        -
          Key: app_version
          Value: !Ref TagAppVersion
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            su - ec2-user -c "FACTER_aem_author_primary_host=${Author1PrivateDnsName} /app/tools/install.sh"
          -
            Author1PrivateDnsName: !GetAtt EC2InstAuthor1.PrivateDnsName
  ELBAuthor:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref SubnetPrvAppIntA
        - !Ref SubnetPrvAppIntB
      SecurityGroups:
        - !Ref SecGrpELBAuthor
      Listeners:
        -
          LoadBalancerPort: "4502"
          InstancePort: "4502"
          Protocol: HTTP
        -
          LoadBalancerPort: "5433"
          Protocol: HTTPS
          InstancePort: "5433"
          InstanceProtocol: HTTPS
          SSLCertificateId: !Ref CertArn
      HealthCheck:
        Target: HTTP:4502/bin/health
        HealthyThreshold: "2"
        UnhealthyThreshold: "2"
        Interval: "30"
        Timeout: "5"
      Instances:
        - !Ref EC2InstAuthor1
        - !Ref EC2InstAuthor2
      Scheme: internal
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 300
      CrossZone: true
      Tags:
        -
          Key: stack_name
          Value: !Ref StackName
  RoleAuthorDisp:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: /
      Policies:
        -
          PolicyDocument:
            Statement:
              -
                Sid: "01"
                Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:CreateTags
                  - autoscaling:CreateOrUpdateTags
                Resource: "*"
              -
                Sid: "02"
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: "*"
              -
                Sid: "03"
                Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - arn:aws:logs:*:*:*
          PolicyName: policyAuthorDispHost
  InstPrfAuthorDisp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref RoleAuthorDisp
  AuthorDispLaunchCfg:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref InstPrfAuthorDisp
      ImageId: !Ref AMIDispatcher
      InstanceMonitoring: false
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SecGrpAuthorDisp
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
        -
          DeviceName: /dev/sdb
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            /bin/echo ${ELBAuthorDNSName} > /tmp/cloud-init-debug.log
            su - ec2-user -c "FACTER_aem_author_host=${ELBAuthorDNSName} /app/tools/install.sh"
          -
            ELBAuthorDNSName: !GetAtt ELBAuthor.DNSName
  AuthorDispASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref AvailZones
      VPCZoneIdentifier:
        - !Ref SubnetPrvAppIntA
        - !Ref SubnetPrvAppIntB
      LaunchConfigurationName: !Ref AuthorDispLaunchCfg
      LoadBalancerNames:
        - !Ref ELBAuthorDisp
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      MinSize: !Ref ASGAuthorDispMinSize
      MaxSize: !Ref ASGAuthorDispMaxSize
      NotificationConfiguration:
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        TopicARN: !Ref AEMASGEventTopic
      Tags:
        -
          PropagateAtLaunch: true
          Key: Name
          Value: !Ref NameTagAuthorDisp
        -
          PropagateAtLaunch: true
          Key: stack_name
          Value: !Ref StackName
        -
          PropagateAtLaunch: true
          Key: component
          Value: aem-dispatcher-author
        -
          PropagateAtLaunch: true
          Key: app_version
          Value: !Ref TagAppVersion
  ELBAuthorDisp:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref SubnetPrvAppIntA
        - !Ref SubnetPrvAppIntB
      SecurityGroups:
        - !Ref SecGrpELBAuthorDisp
      Listeners:
        -
          LoadBalancerPort: "80"
          Protocol: HTTP
          InstancePort: "8080"
          InstanceProtocol: HTTP
        -
          LoadBalancerPort: "443"
          Protocol: HTTPS
          InstancePort: "443"
          InstanceProtocol: HTTPS
          SSLCertificateId: !Ref CertArn
      HealthCheck:
        Target: HTTP:8080/bin/health
        HealthyThreshold: "2"
        UnhealthyThreshold: "2"
        Interval: "30"
        Timeout: "5"
      Scheme: internal
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 300
      CrossZone: true
      Tags:
        -
          Key: stack_name
          Value: !Ref StackName
  RoleOrchestrator:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: /
      Policies:
        -
          PolicyDocument:
            Statement:
              -
                Sid: "01"
                Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:CreateTags
                  - ec2:CreateSnapshot
                  - ec2:TerminateInstances
                Resource: "*"
              -
                Sid: "02"
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: "*"
              -
                Sid: "03"
                Effect: Allow
                Action:
                  - sqs:*
                Resource: "*"
              -
                Sid: "04"
                Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - cloudformation:GetTemplate
                  - cloudformation:List*
                Resource: "*"
              -
                Sid: "05"
                Effect: Allow
                Action:
                  - elasticloadbalancing:Describe*
                Resource:
                  - "*"
              -
                Sid: "06"
                Effect: Allow
                Action:
                  - autoscaling:*
                Resource:
                  - "*"
              -
                Sid: "07"
                Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - arn:aws:logs:*:*:*
          PolicyName: policyOrchestratorHost
  InstPrfOrchestrator:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        -
          Ref: RoleOrchestrator
  OrchestratorLaunchCfg:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref InstPrfOrchestrator
      ImageId: !Ref AMIOrchestrator
      InstanceMonitoring: false
      InstanceType: t2.small
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SecGrpOrchestrator
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
        -
          DeviceName: /dev/sdb
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            su - ec2-user -c /app/tools/install.sh
  OrchestratorASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref AvailZones
      VPCZoneIdentifier: !Ref SubnetPrvAppToolASG
      LaunchConfigurationName: !Ref  OrchestratorLaunchCfg
      MinSize: "1"
      MaxSize: "1"
      Tags:
        -
          PropagateAtLaunch: true
          Key: Name
          Value: !Ref NameTagOrchestrator
        -
          PropagateAtLaunch: true
          Key: stack_name
          Value: !Ref StackName
        -
          PropagateAtLaunch: true
          Key: component
          Value: orchestrator
        -
          PropagateAtLaunch: true
          Key: app_version
          Value: !Ref TagAppVersion
  RoleChaosMonkey:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: /
      Policies:
        -
          PolicyDocument:
            Statement:
              -
                Sid: "01"
                Action:
                  - ec2:CreateTags
                  - ec2:DeleteSnapshot
                  - ec2:DescribeImages
                  - ec2:DescribeInstances
                  - ec2:DescribeSnapshots
                  - ec2:DescribeVolumes
                  - ec2:TerminateInstances
                  - ses:SendEmail
                  - elasticloadbalancing:*
                Effect: Allow
                Resource: "*"
              -
                Sid: "02"
                Action:
                  - autoscaling:DeleteAutoScalingGroup
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:DescribeLaunchConfigurations
                Effect: Allow
                Resource: "*"
              -
                Sid: "03"
                Action:
                  - sdb:BatchDeleteAttributes
                  - sdb:BatchPutAttributes
                  - sdb:DomainMetadata
                  - sdb:GetAttributes
                  - sdb:PutAttributes
                  - sdb:ListDomains
                  - sdb:CreateDomain
                  - sdb:Select
                Effect: Allow
                Resource: "*"
              -
                Sid: "04"
                Action:
                  - ec2:Describe*
                Effect: Allow
                Resource: "*"
              -
                Sid: "05"
                Action:
                  - s3:Get*
                  - s3:List*
                Effect: Allow
                Resource: "*"
          PolicyName: policyChaosMonkeyHost
  InstPrfChaosMonkey:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        -
          Ref: RoleChaosMonkey
  ChaosMonkeyLaunchCfg:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref InstPrfChaosMonkey
      ImageId: !Ref AMIChaosMonkey
      InstanceMonitoring: false
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SecGrpChaosMonkey
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            su - ec2-user -c "FACTER_dispatcher_author_asg_name=${AuthorDispASG} FACTER_dispatcher_publisher_asg_name=${PublisherDispASG} FACTER_publisher_asg_name=${PublisherASG} /app/tools/install.sh"
  ChaosMonkeyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref AvailZones
      VPCZoneIdentifier: !Ref SubnetPrvAppToolASG
      LaunchConfigurationName: !Ref ChaosMonkeyLaunchCfg
      MinSize: "1"
      MaxSize: "1"
      Tags:
        -
          PropagateAtLaunch: true
          Key: Name
          Value: !Ref NameTagChaosMonkey
        -
          PropagateAtLaunch: true
          Key: stack_name
          Value: !Ref StackName
        -
          PropagateAtLaunch: true
          Key: component
          Value: chaosmonkey
        -
          PropagateAtLaunch: true
          Key: app_version
          Value: !Ref TagAppVersion
  DNSRecordELBWeb:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref DNSHostedZoneName
      Name: !Sub ${StackName}-elbweb.${DNSHostedZoneName}
      Type: CNAME
      TTL: "300"
      ResourceRecords:
        - !GetAtt ELBWeb.DNSName
  DNSRecordELBAuthor:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref DNSHostedZoneName
      Name: !Sub ${StackName}-elbauthor.${DNSHostedZoneName}
      Type: CNAME
      TTL: "300"
      ResourceRecords:
        - !GetAtt ELBAuthor.DNSName
  DNSRecordELBAuthorDisp:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref DNSHostedZoneName
      Name: !Sub ${StackName}-elbauthdisp.${DNSHostedZoneName}
      Type: CNAME
      TTL: "300"
      ResourceRecords:
        - !GetAtt ELBAuthorDisp.DNSName
